"""
Django settings for home project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from urllib.parse import urlparse
from decouple import config
from pathlib import Path
import dj_database_url
from django.conf import settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Email Config
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config("EMAIL_HOST", cast=str, default='smtp.gmail.com')
EMAIL_PORT = config("EMAIL_PORT", cast=str, default='587')
EMAIL_USE_TLS = config("EMAIL_USE_TLS", cast=bool, default=True)
EMAIL_USE_SSL = config("EMAIL_USE_SSL", cast=bool, default=False) 
EMAIL_HOST_USER = config("EMAIL_HOST_USER", cast=str, default=None)
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", cast=str, default=None) 

ADMIN_USER_NAME= config("ADMIN_USER_NAME", cast=str, default="Admin user") 
ADMIN_USER_EMAIL= config("ADMIN_USER_EMAIL", cast=str, default=None) 

MANAGERS=[]
ADMINS=[]
if all([ADMIN_USER_NAME, ADMIN_USER_EMAIL]):
    #500 errors are emailed to these users
    ADMINS += [
        (f'{ADMIN_USER_NAME}', F'{ADMIN_USER_EMAIL}')
    ]
    MANAGERS = ADMIN_USER_EMAIL



# ENVIRONMENT is used to differentiate between local and production
ENVIRONMENT = config('ENVIRONMENT', default='local')  # Set this as "production" in Railway environment

# Quick-start development settings - unsuitable for production
SECRET_KEY = config("DJANGO_SECRET_KEY")
DEBUG = config("DJANGO_DEBUG", cast=bool)

ALLOWED_HOSTS = [
    ".railway.app" #'*'  # Production host on Railway
]


CSRF_TRUSTED_ORIGINS = [".railway.app"]

if DEBUG:
    ALLOWED_HOSTS += [
        "127.0.0.1",
        "localhost"
    ]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # My Apps
    'visits',
    'commands',
    'storages', 
    # For AWS S3 integration
    # third party apps
    "allauth_ui",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "widget_tweaks",
    "slippers",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    "allauth.account.middleware.AccountMiddleware",
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'home.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]



WSGI_APPLICATION = 'home.wsgi.application'

# Database configuration
CONN_MAX_AGE = config("CONN_MAX_AGE", cast=int, default=30)
DATABASE_URL = config('DATABASE_URL', default=None)

if DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.config(
            default=DATABASE_URL,
            conn_max_age=CONN_MAX_AGE,
            conn_health_checks=True,
        )
    }

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Django Allauth Config
# LOGIN_REDIRECT_URL = "/"
ACCOUNT_AUTHENTICATION_METHOD="email"
ACCOUNT_EMAIL_VERIFICATION= "mandatory"
ACCOUNT_EMAIL_SUBJECT_PREFIX="[JUSTAPP]"
ACCOUNT_EMAIL_REQUIRED=True

AUTHENTICATION_BACKENDS = [
    # ...
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
    # ...
    
]


# All auth setup
# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {}

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static and Media file settings

 # Define the vendor directory directly
STATICFILES_VENDOR_DIR = BASE_DIR / "staticFiles/vendors"

    # Ensure the vendor directory exists
STATICFILES_VENDOR_DIR.mkdir(parents=True, exist_ok=True) 

if ENVIRONMENT == 'production':
    # WhiteNoise for static files
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    STATIC_URL = '/static/'  # WhiteNoise serves directly from here
    STATIC_ROOT = BASE_DIR / "staticFiles"  # Directory for collected static files

    # Media files configuration for S3
    AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = config("AWS_BUCKET_NAME")
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'
else:
    # Local static files settings
    STATIC_URL = '/static/'
    
    # Define the vendor directory directly
    STATICFILES_VENDOR_DIR = BASE_DIR / "staticFiles/vendors"

    # Ensure the vendor directory exists
    STATICFILES_VENDOR_DIR.mkdir(parents=True, exist_ok=True) 
    
STATICFILES_DIRS = [
        BASE_DIR / "staticFiles",  # Local static directory
        STATICFILES_VENDOR_DIR,
    ]
STATIC_ROOT = BASE_DIR / "local-cdn"  # Directory to collect static files

    # Media files settings for local development
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
